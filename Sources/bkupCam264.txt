#include <iostream>
#include <csignal>
#include <atomic>
#include <map>
#include <deque>

#include "StreamDevice/ClientDevice.hpp"
#include "Tool/Timer.hpp"
#include "Tool/FrameMt.hpp"
#include "Device/DeviceMt.hpp"

#include <codec_api.h>

namespace Globals {
	// Constantes
	// const std::string IP_ADDRESS = "192.168.11.24"; 	// Barnacle V4
	// const std::string IP_ADDRESS = "fe80::b18:f81d:13a8:3a4"; 	// Barnacle V6
	
	// Variables
	volatile std::sig_atomic_t signalStatus = 0;
}

// --- Signals ---
static void sigintHandler(int signal) {
	Globals::signalStatus = signal;
}

// --- Entry point ---
int main(int argc, char* argv[]) {
	// - Install signal handler
	std::signal(SIGINT, sigintHandler);

	// ----- Init decoder ------	
	ISVCDecoder *decoder;
	if(WelsCreateDecoder(&decoder) != 0) {
		std::cout << "Couldn't create decoder" << std::endl;
		return 0;
	}
	
	SDecodingParam decParam;
	memset(&decParam, 0, sizeof (SDecodingParam));
	
	decParam.sVideoProperty.eVideoBsType = VIDEO_BITSTREAM_DEFAULT;
	
	if(decoder->Initialize(&decParam) != 0) {
		std::cout << "Couldn't init decoder" << std::endl;
		return 0;
	}
	
	// ---- Device ----	
	cv::Mat cvFrame = cv::Mat::zeros(480,640,CV_8UC3);
	std::mutex frameMut;
	DeviceMt device;
	
	device.onFrame([&](const Gb::Frame& frame){
		// --- Decode ---
		unsigned char* yuvDecode[3];
		memset(yuvDecode, 0, sizeof (yuvDecode));
		
		SBufferInfo decInfo;
		memset(&decInfo, 0, sizeof (SBufferInfo));
		
		int err = decoder->DecodeFrame2 (frame.start(), frame.length(), yuvDecode, &decInfo);
		if(err == 0 && decInfo.iBufferStatus == 1) {					
			int oStride = decInfo.UsrData.sSystemBuffer.iStride[0];
			int oWidth 	= decInfo.UsrData.sSystemBuffer.iWidth;
			int oHeight = decInfo.UsrData.sSystemBuffer.iHeight;
			
			std::lock_guard<std::mutex> frameLock(frameMut);
			Convert::yuv420ToBgr24(yuvDecode, cvFrame.data, oStride, oWidth, oHeight);
		}
	});
	
	
	device.open("0");
	for(; Globals::signalStatus != SIGINT && cv::waitKey(30) != 27;) {
		std::lock_guard<std::mutex> frameLock(frameMut);
		if(!cvFrame.empty())
			cv::imshow("Camera", cvFrame);
	}
	device.release();
	
	// -- End
	cv::destroyAllWindows();
	if (decoder) {
		decoder->Uninitialize();
		WelsDestroyDecoder(decoder);
	}
	
	std::cout << "Clean exit" << std::endl;
	std::cout << "Press a key to continue..." << std::endl;
	return std::cin.get();
}

